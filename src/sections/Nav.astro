---
import MobileNavModal from "../components/MobileNavModal.astro";
import NavLinks from "../components/NavLinks.astro";
const { currentPath } = Astro.props;
const sections = [
  { value: "HOME", redirect: "/" },
  { value: "ABOUT_JESSE", redirect: "/" },
  { value: "PROJECTS", redirect: "/" },
  { value: "BLOG", redirect: "/blog" },
  { value: "CONNECT", redirect: "/" },
];
---

<div class="h-28"></div>
<nav
  class="fixed z-50 flex h-24 w-full max-w-9xl items-center justify-center bg-white max-md:h-18 2xl:w-11/12"
>
  <div class="flex w-11/12 items-center justify-between">
    <a
      href="/"
      class="flex items-end gap-2 whitespace-nowrap font-brandFont text-3xl max-md:w-1/2 2xl:m-0"
    >
      <img
        alt="logo"
        src="/logo_spin.gif"
        class="inline-block h-8 w-8"
      />jessep.fi
    </a>
    <div
      class="flex w-3/6 min-w-fit items-center justify-between max-md:hidden"
    >
      <div
        id="nav-links"
        class="relative -right-2 flex w-full justify-between gap-4"
      >
        <NavLinks sections={sections} currentPath={currentPath} />
      </div>
    </div>

    <div class="hidden w-fit max-md:block">
      <MobileNavModal sections={sections}>
        <NavLinks sections={sections} currentPath={currentPath} />
      </MobileNavModal>
    </div>
  </div>
</nav>
<div
  id="nav-border"
  class="fixed left-0 top-24 z-30 h-0.75 w-screen origin-left scale-x-0 bg-brandMain transition-transform duration-300 max-md:top-18"
>
</div>

<script define:vars={{ sections, currentPath }}>
  const navBorder = document.getElementById("nav-border");
  const nav = document.querySelector("#nav-links");

  nav.addEventListener("click", (event) => {
    const clicked = event.target.innerText.replaceAll(" ", "_");
    if (
      sections.find(
        (section) =>
          section.value === clicked && section.redirect === currentPath,
      )
    ) {
      const section = document.querySelector(`#${clicked}`);
      section.scrollIntoView({ behavior: "smooth", block: "start" });
    }
  });

  let borderState = false;
  const addBorderOnScrollDown = () => {
    if (
      !borderState &&
      window.scrollY > Math.max(448, window.innerHeight / 2)
    ) {
      navBorder.classList.remove("scale-x-0");
      navBorder.classList.add("scale-x-100");
      borderState = true;
    } else if (
      borderState &&
      window.scrollY < Math.max(448, window.innerHeight / 2)
    ) {
      navBorder.classList.remove("scale-x-100");
      navBorder.classList.add("scale-x-0");
      borderState = false;
    }
  };

  window.addEventListener("scroll", addBorderOnScrollDown);

  addBorderOnScrollDown();
</script>
