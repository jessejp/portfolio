---
import ArticleModal from "./ArticleModal.astro";
const { frontmatter } = Astro.props;
const title = frontmatter.title.toUpperCase();
const githubIcon = await import("/assets/icons/github.svg?raw");
const externalIcon = await import("/assets/icons/open-external.svg?raw");
---

<div class="w-1/2 max-w-2xl max-md:self-start max-md:w-full max-md:order-2">
  <h3 class="text-3xl">{title}</h3>
  <div class="text-lg max-w-xl">{frontmatter.description}</div>
  <div class="mt-4"></div>
  <div class="flex flex-wrap gap-4 max-xs:gap-2">
    <ArticleModal id={frontmatter.slug} title={title}><slot /></ArticleModal>
    <a
      class="relative flex items-center h-12 w-fit py-1 px-8 max-sm:px-4 font-brandFont text-brandMain border-brandMain fill-brandMain border-2 text-2xl font-medium animate-bgSlideLeft hover:animate-bgSlideRight bg-no-repeat bg-x--10rem bg-gradient-to-r from-brandMain from-100% to-white to-200%"
      href={frontmatter.href}
      target="_blank"
      >Visit Page <svg
        viewBox="0 0 512 512"
        class="w-6 h-full stroke-none fill-inherit relative left-2"
        set:html={`
      <title>External Page Link</title>
      ${externalIcon.default}
      `}
      /></a
    >
    {
      !!frontmatter.github && (
        <a
          class="flex items-center h-12 w-fit py-1 px-3 font-brandFont text-brandMain border-brandMain fill-brandMain border-2 text-2xl font-medium animate-bgSlideLeft hover:animate-bgSlideRight bg-no-repeat bg-x--10rem bg-gradient-to-r from-brandMain from-100% to-white to-200%"
          href={frontmatter.github}
          target="_blank"
        >
          <svg
            viewBox="0 0 24 24"
            class="w-6 h-full stroke-none fill-inherit"
            set:html={`
        <title>GitHub Link</title>
        ${githubIcon.default}
        `}
          />
        </a>
      )
    }
  </div>
  <div class="mt-8"></div>
  <div class="flex flex-wrap gap-x-4 gap-y-2 max-w-lg">
    {
      !!frontmatter.stack &&
        frontmatter.stack.map((item) => (
          <span class="text-sm text-gray-600">{item}</span>
        ))
    }
  </div>
</div>
<a
  id=`thumbnain-container-${frontmatter.slug}`
  class="aspect-square flex items-center overflow-hidden max-w-sm shadow-hard-right shadow-superYellow border-transparent border-1 hover:border-superYellow hover:border-2 max-md:w-full max-md:mt-6 max-md:self-start"
  href={frontmatter.href}
  target="_blank"
>
  <img
    id=`img-thumbnail-${frontmatter.slug}`
    class="w-96 h-auto block"
    src={frontmatter.thumbnail}
    alt={frontmatter.alt}
  />
  <img
    id=`img-animation-${frontmatter.slug}`
    class="w-96 h-min scale-114 hidden"
    src={frontmatter.thumbnailAnimated}
    alt={frontmatter.alt}
  />
</a>

<script define:vars={{ slug: frontmatter.slug }}>
  const thumbnailContainer = document.getElementById(
    `thumbnain-container-${slug}`
  );
  const thumbnail = document.getElementById(`img-thumbnail-${slug}`);
  const thumbnailAnimated = document.getElementById(`img-animation-${slug}`);
  const viewportWidth =
    window.innerWidth || document.documentElement.clientWidth;
  const viewportHeight =
    window.innerHeight || document.documentElement.clientHeight;
  const mobileScreenWidth = viewportWidth <= 768;
  let animationPlaying = false;

  function isInViewport(el) {
    const rect = el.getBoundingClientRect();
    return (
      rect.top >= 0 &&
      rect.left >= 0 &&
      rect.bottom <=
        (window.innerHeight || document.documentElement.clientHeight) &&
      rect.right <= (window.innerWidth || document.documentElement.clientWidth)
    );
  }

  thumbnailContainer.addEventListener("mouseenter", () => {
    thumbnail.classList.add("hidden");
    thumbnailAnimated.classList.remove("hidden");
  });

  thumbnailContainer.addEventListener("mouseleave", () => {
    thumbnail.classList.remove("hidden");
    thumbnailAnimated.classList.add("hidden");
  });

  document.addEventListener(
    "scroll",
    function () {
      if (!mobileScreenWidth) return;
      let timeout;
      if (isInViewport(thumbnailContainer)) {
        if (animationPlaying) return;
        animationPlaying = true;
        timeout = setTimeout(() => {
          thumbnail.classList.add("hidden");
          thumbnailAnimated.classList.remove("hidden");
        }, 750);
      } else {
        thumbnail.classList.remove("hidden");
        thumbnailAnimated.classList.add("hidden");
        animationPlaying = false;
        clearTimeout(timeout);
      }
    },
    {
      passive: true,
    }
  );
</script>
